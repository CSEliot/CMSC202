	/** 	 *  pre-conditions: 	 * 	post-conditions: 	 * 	 * @param 	 * @return	 *//*BigDecimal trueChange = new BigDecimal("0.3444444545434355");		trueChange = trueChange.setScale(2,BigDecimal.ROUND_HALF_EVEN);		System.out.println(trueChange);		return;   (No explicit return value)package proj3;/** * @author Eli * */public class Money {	private int nrNickels = 0;	private int nrDimes = 0;	private int nrQrters = 0;	private  double total = 0;		/**	 * Constructor Method.	 * 	 * @param nrNickels - Number of Nickels	 * @param nrDimes - Number of Dimes	 * @param nrQrts - Number of Quarters	 */	public Money(int nrNickels, int nrDimes, int nrQrts) 	{		this.nrNickels += nrNickels;		this.nrDimes += nrDimes;		this.nrQrters += nrQrts;				total += (nrNickels*0.05) +				(nrDimes*0.10) +				(nrQrters*0.25);			}		public double getTotal()	{		return total;	}		public int getNrNickels() {		return nrNickels;	}	public int getNrDimes() {		return nrDimes;	}	public int getNrQrters() {		return nrQrters;	}	public void addNrNickels(int nrNickels) {		this.nrNickels += nrNickels;	}	public void addNrDimes(int nrDimes) {		this.nrDimes += nrDimes;	}	public void addNrQrters(int nrQrters) {		this.nrQrters += nrQrters;	}	public void addTotal(double total) {		this.total += total;	}	/* 	 * @see java.lang.Object#toString()	 */	public String toString()	{		String str =	"Nickels: " + nrNickels + 						"\nDimes: " + nrDimes + 						"\nQuarters: " + nrQrters + 						"\nTotal: " + total;		return str;			}}package proj3;import java.awt.Color;import java.util.ArrayList;import java.math.BigDecimal;/** * @author Eli * */public class SnackMachine {	Mints mint;	private ArrayList<Color> mintStorage = new ArrayList<Color>(75);	private Money regMoney = new Money(0,0,0);	BigDecimal MINT_COST = new BigDecimal("0.35");	BigDecimal trueChange;	/**	 * @param money - object holding inserted cash.	 * @return	 */	public Mints buyMints(Money money) {				System.out.println("Payed total: " + money.getTotal());				trueChange = new BigDecimal(money.getTotal());		trueChange = trueChange.setScale(2,BigDecimal.ROUND_HALF_UP);		trueChange = trueChange.setScale(2,BigDecimal.ROUND_HALF_DOWN);		System.out.println("FIXED PAY: " + trueChange.toString());				if(trueChange.compareTo(MINT_COST) != 0 || mintStorage.size() <= 0)		{			//System.out.println("Compare: null");			return mint = null;		}		else		{			//System.out.println("Compare: Success");			mint = new Mints(mintStorage.get(mintStorage.size() - 1));			removeMints();			cashRegister(money);			return mint;		}					}	public Cookies buyCookies(Money money) {		// TODO Auto-generated method stub		return null;	}	public void addCookies(CookieFlavors flavor, int nrCookies) {		// TODO Auto-generated method stub			}	/** uses a do-while to add mints to the list containing colors.	 *  pre-conditions: No nulls, nrMints can't be 0 or less.	 * 	 * @param mColor - Color object containing mint color, can't be null. 	 * @param nrMints	 */	public void addMints(Color mColor, int nrMints) {						//Test Cases for Exceptions.		if(mColor == null)		{			throw new RuntimeException("Color is Null");		}		else if(nrMints <= 0)		{			throw new RuntimeException("nrMints cannot be 0 or less.");		}		else if(mintStorage.size() + nrMints > 75)		{			throw new RuntimeException("Attempted to add too many Mints");		}						do		{			mintStorage.add(0, mColor);		nrMints--;		}		while(nrMints !=0);	/*			System.out.println(""+mColor.getRGB());		System.out.println(""+mColor.getRed());		System.out.println(""+mColor.getGreen());		System.out.println(""+mColor.getBlue());		System.out.println(mintStorage.toString());*/			}	public int getNrMints() {		return mintStorage.size();	}	public int getNrCookies() {		// TODO Auto-generated method stub		return 0;	}	public Money getCashOnHand()	{		return regMoney;	}	//-- helper methods	private final void removeMints()	{		mintStorage.remove(mintStorage.size() -1);	}		private final void cashRegister(Money money)	{				regMoney.addNrDimes(money.getNrDimes());		regMoney.addNrNickels(money.getNrNickels());		regMoney.addNrQrters(money.getNrQrters());		regMoney.addTotal(money.getTotal());			}		public static void main (String [] args)	{		SnackMachine snckMchnTest = new SnackMachine();		final Color RED = new Color(255, 0, 0);		final Color BLUE = new Color(0, 0, 255);		final Color GREEN = new Color(0, 255, 0);		snckMchnTest.addMints(RED, 3);		System.out.println("Number of mints: " + snckMchnTest.getNrMints());		snckMchnTest.addMints(GREEN, 2);		System.out.println("Number of mints: " + snckMchnTest.getNrMints());		snckMchnTest.addMints(BLUE, 4);		System.out.println("Number of mints: " + snckMchnTest.getNrMints());				/*//Testing max mint storage		snckMchnTest.addMints(GREEN, 100);		System.out.println("Number of mints: " + snckMchnTest.getNrMints());*/				snckMchnTest.buyMints(new Money(0, 1, 1));		snckMchnTest.buyMints(new Money(2, 0, 1));		snckMchnTest.buyMints(new Money(7, 0, 0));		snckMchnTest.buyMints(new Money(5, 1, 0));		snckMchnTest.buyMints(new Money(3, 2, 0));		snckMchnTest.buyMints(new Money(1, 3, 0));		snckMchnTest.buyMints(new Money(7, 0, 0));		snckMchnTest.buyMints(new Money(0, 1, 1));		snckMchnTest.buyMints(new Money(0, 1, 1));		System.out.println("Number of mints: " + snckMchnTest.getNrMints());				System.out.println("getCashOnHand: " + snckMchnTest.getCashOnHand());				System.out.println("Hey There! We're Done Testing SnackMachine!");					}}*/